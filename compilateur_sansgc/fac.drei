/* garbage collector, allocation dynamique de mémoire */

/* ASSEMBLEUR, CHOSES SERIEUSES */
class Gc 
{
  asm Give_Tas () : Int = {
    @SYSCALL R29 0 13@
    @ADDI R1 R29 0@
  };

  asm Print_Tas () {
    @SYSCALL R29 0 13@
    @SYSCALL R29 0 7@
    @ADDI R28 0 10@
    @SYSCALL R28 0 6@
  }

  asm rdm_b (x : Int) {
    @LDW R29 R30 4@
    @LDB R1 R29 0@
    @ANDI R1 R1 0xff@
  }

  asm rdm_w (x : Int) {
    @LDW R29 R30 4@ 
    @LDW R1 R29 0@
  }

  // Ecris _x_ à l'adresse _addr_
  asm wrm_w (addr:Int, x:Int) {
    /* x */
    @LDW R29 R30 4@
    /* addr */
    @LDW R28 R30 8@
    @STW R29 R28 0@
  }

  // Shift droit : x << y
  asm shiftr (x:Int, y:Int) {
    @LDW R29 R30 8@
    @LDW R28 R30 4@
    @ASH R1 R29 R28@ 
  }

  // Shift gauche : x >> y
  def shiftl (x:Int, y:Int) : Int = {
    return (this.shiftr(x,-y))
  };


  // Début de la mémoire
  val memory : Int;
  val max_size : Int;
  val max_size2 : Int;


  // Fonctions d'usage
  def isFree (b : Int) : Int = {
    var cont : Int = this.rdm_w(b);
    return ((cont & 2) == 2) 
  };

  def isUsed (b : Int) : Int = {
    return (!this.isFree(b))
  };

  def setFree (b : Int)  {
    var cont : Int = this.rdm_w(b);
    do (this.wrm_w(b, cont | 2));
    /* set white */
  }
  
  def setUsed (b : Int) {
    var cont : Int = this.rdm_w(b);
    do(this.wrm_w(b, cont & (~2)));
  }

  // taille (set met les flags à zéros)
  def Size (b : Int) : Int = {
    var cont : Int = this.rdm_w(b);
    return (this.shiftr(this.shiftl(cont,2),2))
  };
  
  def setSize (b : Int, size : Int) {
    do(this.wrm_w(b, size));
  }

  def isBlack (b : Int) : Int = {
    var cont : Int = this.rdm_w(b);
    return ((cont & 1) == 1)
  };
  
  def isWhite (b : Int) : Int = {
    return (!this.isBlack(b))
  };
  
  def setBlack (b : Int) {
    var cont : Int = this.rdm_w(b);
    do (this.wrm_w(b, cont | 1));
  }

  def setWhite (b : Int) {
    var cont : Int = this.rdm_w(b);
    do (this.wrm_w(b, cont & 0));
  }


  /***  Gestion des blocs, malloc ***/

  // bloc suivant un bloc : renvoie le prochain ou -1 si ca rate
  def blk_next (p : Int) : Int = {
    var b : Int =  p + (this.Size(p));
    var res : Int = -1;
    if (b < this.memory + this.max_size) 
      set res = b;

    return res
  };

  
  /* On doit supprimer cette fonction car elle fait des new 
  // Affiche l'état de la mémoire
  def Dump () {
    var p : Int = this.memory;
    
    while (p != -1) 
    {
      /* Affichage 
      do "Bloc ".stringPrint();
      printInt(p);
      do " de taille ".stringPrint();
      printInt(this.Size(p));
      printChar(32);
      if (this.isFree(p)) 
        do "-> libre".stringPrintLn();
      else
        do "-> utilise".stringPrintLn();

      set p = this.blk_next(p);
    }
  }*/

  // recherche d'un bloc libre de taille supérieure ou égale à s
  def search_freeblk (s : Int) : Int = {
    var res : Int = -1; 
    var p : Int = this.memory;
    while ((p != -1) && (res == -1)) 
    {
      if (this.isFree(p) && (s <= this.Size(p)))
        set res = p;
      set p = this.blk_next(p);
    }
    
    return res
  };

  def Free (b : Int) {
    if ((b >= this.memory) && (b < (this.memory + this.max_size)))
      if (this.isUsed(b))
        do this.setFree(b);  
  }

/* Fusion des blocs libres */
  def merge_free_blocks () { 
    var p : Int = this.memory;
    var q : Int = 0;
    var ok : Int = 0;

    while (p != -1) 
    {
      if (this.isFree(p))
      {
        /* Recherche de la plus grande suite de blocks libres */
        while (ok != 1)
        {
          set q = this.blk_next(q);
          /* Si on a atteint le bord du monde */
          if (q == -1)
            set ok = 1;
          else if (this.isUsed(q))
            set ok = 1;
        }
        set ok = 0;
         
        /* Fusionne ou fusionnera pas ? */
        if (q != this.blk_next(p))
        { 
          /* Si on est arrivé au bout de la mémoire */ 
          if (q == -1)
            set q = this.memory + this.max_size;
          /* FUSION !!! */
          do this.setSize(p, q - p);
          do this.setFree(p);
        }
      }      
      set p = this.blk_next(p);
    }
  }

  def is_block (b : Int) : Int = {
    var res : Int = 0; 
    var p : Int = this.memory;
  
    if ((b >= p) && ((b%4) == 0)) 
    {
      while ((p != -1) && (res == 0)) 
      {
        if (p == b)
          set res = 1;
        set p = this.blk_next(p);
      }
    }    
    return res    
  };

  def colorie_fils (b : Int) {
    var i : Int = 1;
    var p : Int = 0;
    
    if (this.is_block(b))  
    {
      if (this.isWhite(b)) 
      {
        do this.setBlack(b);
        set i = this.Size(b) - 4;
        while (i >= 4) 
        {
          set p = this.rdm_w(b + i);
          do this.colorie_fils(p);
          
          set i = i - 4;
        }
      }
    }
  }

  def gc (b:Int) {
    var p : Int = this.memory;
  
    if (b >= this.memory) 
      do this.colorie_fils(b);

    

    while (p != -1) 
    {
      if (this.isBlack(p)) 
        do this.setWhite(p);
      else 
        do this.setFree(p);

      set p = this.blk_next(p);
    }

    do this.merge_free_blocks();
  }


  def Alloc (n : Int) : Int = { 
    var t : Int = (n-(n%4))+4;
    var p : Int = this.search_freeblk(t);
    var prochain : Int = -1;
    var t1: Int = this.Size(p);
    var res : Int = p;

    /* Si le bloc est libre et de taille suffisante, on l'alloue */
    if ((p != -1) && (t1 > t))
    {
      /* On découpe */
      do this.setSize(p, t);
      do this.setUsed(p);

      set prochain = this.blk_next(p);
      do this.setSize(prochain, t1 - t);
      do this.setFree(prochain);
      set res = res + 4;
    }
    else if ((p != -1)) 
    {
      do this.setUsed(p);  
      do this.setSize(p,t);
      set res = res + 4;
    }

    return res
  };

  // Initialise le GC
  asm Init (s : Int) {
    do (this.setSize(this.memory, this.max_size));
    do (this.setFree(this.memory));
    do (this.Alloc(s));    
  }

}
// Function classes

class Int2Int {
  def apply(x: Int): Int = this.apply(x);
}

class Int2Nothing {
  def apply(x: Int) { do this.apply(x); }
}

class IntInt2Int {
  def apply(x: Int, y: Int) : Int = this.apply(x, y);
}


class Carre extends Int2Int {
  def apply(x: Int): Int = x*x;
}

class Bool extends Int2Int {
  def apply(x: Int): Int = (x >= 9);
}

class Print extends Int2Nothing {
  def apply(x:Int) { printInt (x); printChar(10); }
}

// List

class List {
  def isEmpty(): Int = this.isEmpty();
  def head(): Int = this.head();
  def tail(): List = this.tail();

  def print() {
    if(this.isEmpty()) printChar(10);
    else {
      printInt(this.head());
      printChar(32);
      do this.tail().print();
    }
  }

  def append(x: Int): List = {
    var xs: List = this;
    if (this.isEmpty())
      set xs = new Cons(x, this);
    else
      set xs = new Cons(this.head(), this.tail().append(x));
    return xs
  };

  def length(): Int = {
    var len: Int = 0;
    var xs: List = this;
    while (!xs.isEmpty()) {
      set len = len + 1;
      set xs = xs.tail();
    }
    return len
  };

  def map(f: Int2Int): List = {
    var xs: List = this;
    if (!this.isEmpty()) {
      var head: Int = f.apply(this.head());
    set xs = new Cons(head, this.tail().map(f));
    }
    return xs
  };

  def foreach(f: Int2Nothing) {
    var xs: List = this;
    while (!xs.isEmpty()) {
      do f.apply(xs.head());
      set xs = xs.tail();
    }
  }

  def concat(that: List): List = {
    var xs: List = that;
    if (!this.isEmpty()) {
      set xs = new Cons(this.head(), this.tail().concat(that));
    }
    return xs
  };

  def foldLeft(acc: Int, f: IntInt2Int): Int = {
    var xs: List = this;
    while (!xs.isEmpty()) {
      set acc = f.apply(acc, xs.head());
      set xs = xs.tail();
    }
    return acc
  };

  def reverse(): List = {
    var xs: List = this;
    var ys: List = new Nil();
    while (!xs.isEmpty()) {
      set ys = new Cons(xs.head(), ys);
      set xs = xs.tail();
    }
    return ys
  };

  def filter(f: Int2Int): List = {
    var xs: List = this;
    if (!this.isEmpty()) {
      var good: Int = f.apply(xs.head());
      var ys: List = this.tail().filter(f);
      if (good) { set xs = new Cons(xs.head(), ys); }
      else { set xs = ys;}
    }
    return xs
  };

  def stringPrint() {
    var xs: List = this;
    while (!xs.isEmpty()) {
      printChar(xs.head());
      set xs = xs.tail();
    }
  }

  def stringPrintLn() {
    do this.stringPrint();
    printChar(10);
  }
}

// Cons

class Cons extends List {
  val head: Int;
  val tail: List;
  def isEmpty(): Int = false;
  def head(): Int = this.head;
  def tail(): List = this.tail;
}

// Nil

class Nil extends List {
  def isEmpty(): Int = true;
}

{
  var l : List = new Nil();
  var b : Int2Int = new Bool ();
  var f : Int2Int = new Carre ();
  var print: Int2Nothing = new Print ();
  set l = l.append(3);
  set l = l.append(7);
set l = l.append(9);
  set l = l.append(5);
  do (l.print());	
  set l = ((l.concat(l.map(f).reverse())).filter(b));
  do l.foreach(print);

  do (l.print());

}
